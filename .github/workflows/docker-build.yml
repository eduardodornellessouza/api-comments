name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: eduardods/api-comments
  CLUSTER_NAME: api-comments-aks
  RESOURCE_GROUP: rg-api-comments
  TERRAFORM_DIR: ./terraform
  HELM_CHART: ./helm/api-comments
  HELM_RELEASE: api-comments
  OBS_NAMESPACE: monitoring

jobs:
  docker:
    runs-on: ubuntu-latest
    environment: dockerhub
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: DockerHub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build e push da imagem
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile.prod
          push: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE_NAME }}:latest

  infra:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Exportar variáveis ARM para Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform init -input=false

      - name: Terraform Plan (salvando em arquivo)
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform plan -out=tfplan

      - name: Compactar tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          mkdir -p ../plan-artifacts
          cp tfplan ../plan-artifacts/
          echo "Plano de execução salvo."

      - name: Upload do tfplan como artefato
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ./plan-artifacts/tfplan


      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform apply -auto-approve

  cluster:
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Conectar no AKS
        run: |
          az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --overwrite-existing
          kubectl get nodes

  ingress:
    runs-on: ubuntu-latest
    needs: cluster
    steps:
      - name: Instalar ingress NGINX
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/helm-charts || true
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --version 4.6.0 \
            --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"="/healthz"

      - name: Aguardar readiness do ingress
        run: |
          echo "⏳ Esperando ingress-nginx..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=120s

  monitoring:
    runs-on: ubuntu-latest
    needs: ingress
    steps:
      - name: Instalar Prometheus/Grafana
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
          helm repo update
          helm upgrade --install kube-prometheus prometheus-community/kube-prometheus-stack \
            --namespace ${{ env.OBS_NAMESPACE }} \
            --create-namespace \
            --values ./monitoring/monitoring-values.yaml \
            --wait

  logs:
    runs-on: ubuntu-latest
    needs: monitoring
    steps:
      - name: Instalar Loki/Promtail
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts || true
          helm repo update
          helm upgrade --install loki grafana/loki-stack \
            --namespace ${{ env.OBS_NAMESPACE }} \
            --values ./monitoring/loki-values.yaml \
            --wait

  app:
    runs-on: ubuntu-latest
    needs: logs
    steps:
      - name: Deploy da aplicação via Helm
        run: |
          helm upgrade --install ${{ env.HELM_RELEASE }} ${{ env.HELM_CHART }} \
            --namespace apis \
            --create-namespace
